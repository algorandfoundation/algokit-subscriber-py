[tool.poetry]
name = "algokit-subscriber"
version = "1.0.0-beta.2"
description = ""
authors = ["Algorand Foundation"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
py-algorand-sdk = "^2.6.1"
algokit-utils = "^2.3.0"
python-semantic-release = "^9.8.8"

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.1"
ruff = "^0.5.0"
pytest = "^8.2.2"
pre-commit = "^3.8.0"
black = "^24.8.0"
pytest-cov = "^5.0.0"
sphinx = "^7.2.6"
furo = "^2024.1.29"
myst-parser = "^4.0.0"
sphinx-autodoc2 = "^0.5.0"
sphinx-copybutton = "^0.5.2"
sphinx-autobuild = "^2024.4.16"
sphinx-mermaid = "^0.0.8"
poethepoet = "^0.24.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# TODO: eventually bring this down to 120
line-length = 280
lint.select = [
    # all possible codes as of this ruff version are listed here,
    # ones we don't want/need are commented out to make it clear
    # which have been omitted on purpose vs which ones get added
    # in new ruff releases and should be considered for enabling
    "F",   # pyflakes
    "E",
    "W",   # pycodestyle
    "C90", # mccabe
    "I",   # isort
    "N",   # PEP8 naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    # "S",    # flake8-bandit
    # "BLE",  # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    # "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    # "DJ",   # flake8-django
    # "EM",   # flake8-errmsg
    # "EXE",  # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    # "G",    # flake8-logging-format
    # "INP",  # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    # "PD",   # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    # "TRY",  # tryceratops
    # "NPY",  # NumPy-specific rules
    "RUF", # Ruff-specific rules
]
lint.ignore = [
    "ANN101", # no type for self
    "ANN102", # no type for cls
    "RET505", # allow else after return
    "SIM108", # allow if-else in place of ternary
    "E111",   # indentation is not a multiple of four
    "E117",   # over-indented
    "ISC001", # single line implicit string concatenation
    "ISC002", # multi line implicit string concatenation
    "Q000",   # bad quotes inline string
    "Q001",   # bad quotes multiline string
    "Q002",   # bad quotes docstring
    "Q003",   # avoidable escaped quotes
    "W191",   # indentation contains tabs
    "ERA001", # commented out code
]
# Exclude a variety of commonly ignored directories.
extend-exclude = ["docs", ".git", ".mypy_cache", ".ruff_cache"]
# Assume Python 3.12.
target-version = "py312"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true

[tool.mypy]
files = ["src", "examples"]
exclude = ["dist", "tests"]
python_version = "3.10"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
strict = true
disallow_untyped_decorators = true
disallow_any_generics = false
implicit_reexport = false
show_error_codes = true

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["E501", "T201", "PLR2004", "F811"]
"examples/*" = ["T201"]

[tool.poe.tasks]
docs-test = { shell = "sphinx-build -b doctest docs docs/_build -W --keep-going -n -E" }
docs-clear = { shell = "rm -rf docs/_build" }
docs-build = { shell = "poetry run poe docs-clear && sphinx-build docs docs/_build -W --keep-going -n -E" }
docs-dev = { shell = "poetry run poe docs-build && sphinx-autobuild docs docs/_build" }

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
commit_message = "{version}\n\n[skip ci] Automatically generated by python-semantic-release"
tag_format = "v{version}"
allow_zero_version = false

[tool.semantic_release.branches.stable]
match = "release/*"
prerelease = false

[tool.semantic_release.branches.canary]
match = "main"
prerelease_token = "beta"
prerelease = true

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "docs"]

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*", "stubs/dist/*"] # order here is important to ensure compiler wheel is published first
upload_to_vcs_release = true

[tool.semantic_release.remote.token]
env = "GITHUB_TOKEN"